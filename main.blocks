<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="MJ)yV28JdXDwENXx~T$u" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="v?cZW)@jGIRQ(1/#`WvV"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="declare interface Math {" line1="    floor(x: number): number;" line2="}" numlines="3"></mutation><next><block type="typescript_statement" id="y_$_SMjO@^Z1Q}cjtyaJ"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace AIponybot {" line1="    /**" line2="    * ---------------PCA9685-------------------" line3="    */" line4="    const PCA9685_ADDRESS = 0x40" line5="    const MODE1 = 0x00" line6="    const MODE2 = 0x01" line7="    const SUBADR1 = 0x02" line8="    const SUBADR2 = 0x03" line9="    const SUBADR3 = 0x04" line10="    const PRESCALE = 0xFE" line11="    const LED0_ON_L = 0x06" line12="    const LED0_ON_H = 0x07" line13="    const LED0_OFF_L = 0x08" line14="    const LED0_OFF_H = 0x09" line15="    const ALL_LED_ON_L = 0xFA" line16="    const ALL_LED_ON_H = 0xFB" line17="    const ALL_LED_OFF_L = 0xFC" line18="    const ALL_LED_OFF_H = 0xFD" line19="" line20="    const STP_CHA_L = 2047" line21="    const STP_CHA_H = 4095" line22="" line23="    const STP_CHB_L = 1" line24="    const STP_CHB_H = 2047" line25="" line26="    const STP_CHC_L = 1023" line27="    const STP_CHC_H = 3071" line28="" line29="    const STP_CHD_L = 3071" line30="    const STP_CHD_H = 1023" line31="" line32="" line33="    const BYG_CHA_L = 3071" line34="    const BYG_CHA_H = 1023" line35="" line36="    const BYG_CHB_L = 1023" line37="    const BYG_CHB_H = 3071" line38="" line39="    const BYG_CHC_L = 4095" line40="    const BYG_CHC_H = 2047" line41="" line42="    const BYG_CHD_L = 2047" line43="    const BYG_CHD_H = 4095" line44="" line45="    /** " line46="     * The user can choose the mecanum mode direction " line47="     */" line48="    export enum Mecanum {" line49="        //% block=&quot;↖&quot;" line50="        lf = 1," line51="        //% block=&quot;↑&quot;" line52="        ff = 2," line53="        //% block=&quot;↗&quot;" line54="        rf = 3," line55="        //% block=&quot;←&quot;" line56="        ll = 4," line57="        //% block=&quot;s&quot;" line58="        ss = 5," line59="        //% block=&quot;→&quot;" line60="        rr = 6," line61="        //% block=&quot;↙&quot;" line62="        lb = 7," line63="        //% block=&quot;↓&quot;" line64="        bb = 8," line65="        //% block=&quot;↘&quot;" line66="        rb = 9" line67="    }" line68="" line69="    /** " line70="    * The user can choose the mobility controll" line71="    */" line72="    export enum DirControll {" line73="        //% block=&quot;↑&quot;" line74="        foward = 1," line75="        //% block=&quot;↓&quot;" line76="        backward = 2," line77="        //% block=&quot;↶&quot;" line78="        CWRotate = 3," line79="        //% block=&quot;↷&quot;" line80="        CCWRotate = 4," line81="    }" line82="" line83="    /**" line84="     * The user can choose the step motor model." line85="     */" line86="    export enum Stepper {" line87="        //% block=&quot;42&quot;" line88="        Ste1 = 1," line89="        //% block=&quot;28&quot;" line90="        Ste2 = 2" line91="    }" line92="" line93="    /**" line94="     * The user can select the 8 steering gear controller." line95="     */" line96="    export enum Servos {" line97="        S1 = 0x01," line98="        S2 = 0x02," line99="        S3 = 0x03," line100="        S4 = 0x04," line101="        S5 = 0x05," line102="        S6 = 0x06," line103="        S7 = 0x07," line104="        S8 = 0x08" line105="    }" line106="" line107="    /**" line108="     * The user selects the 4-way dc motor." line109="     */" line110="    export enum Motors {" line111="        M1 = 0x1," line112="        M2 = 0x2," line113="        M3 = 0x3," line114="        M4 = 0x4" line115="    }" line116="" line117="    /**" line118="     * The user defines the motor rotation direction." line119="     */" line120="    export enum Dir {" line121="        //% blockId=&quot;정회전&quot; block=&quot;정회전&quot;" line122="        CW = 1," line123="        //% blockId=&quot;역회전&quot; block=&quot;역회전&quot;" line124="        CCW = -1," line125="    }" line126="" line127="    /**" line128="     * The user can select a two-path stepper motor controller." line129="     */" line130="    export enum Steppers {" line131="        M1_M2 = 0x1," line132="        M3_M4 = 0x2" line133="    }" line134="" line135="    let initialized = false" line136="" line137="    function i2cWrite(addr: number, reg: number, value: number) {" line138="        let buf = pins.createBuffer(2)" line139="        buf[0] = reg" line140="        buf[1] = value" line141="        pins.i2cWriteBuffer(addr, buf)" line142="    }" line143="" line144="    function i2cCmd(addr: number, value: number) {" line145="        let buf2 = pins.createBuffer(1)" line146="        buf2[0] = value" line147="        pins.i2cWriteBuffer(addr, buf2)" line148="    }" line149="" line150="    function i2cRead(addr: number, reg: number) {" line151="        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);" line152="        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);" line153="        return val;" line154="    }" line155="" line156="    function initPCA9685(): void {" line157="        i2cWrite(PCA9685_ADDRESS, MODE1, 0x00)" line158="        setFreq(50);" line159="        initialized = true" line160="    }" line161="" line162="    function setFreq(freq: number): void {" line163="        // Constrain the frequency" line164="        let prescaleval = 25000000;" line165="        prescaleval /= 4096;" line166="        prescaleval /= freq;" line167="        prescaleval -= 1;" line168="        let prescale = prescaleval;//Math.floor(prescaleval + 0.5);" line169="        let oldmode = i2cRead(PCA9685_ADDRESS, MODE1);" line170="        let newmode = (oldmode &amp; 0x7F) | 0x10; // sleep" line171="        i2cWrite(PCA9685_ADDRESS, MODE1, newmode); // go to sleep" line172="        i2cWrite(PCA9685_ADDRESS, PRESCALE, prescale); // set the prescaler" line173="        i2cWrite(PCA9685_ADDRESS, MODE1, oldmode);" line174="        control.waitMicros(5000);" line175="        i2cWrite(PCA9685_ADDRESS, MODE1, oldmode | 0xa1);" line176="    }" line177="" line178="    function setPwm(channel: number, on: number, off: number): void {" line179="        if (channel &lt; 0 || channel &gt; 15)" line180="            return;" line181="" line182="        let buf3 = pins.createBuffer(5);" line183="        buf3[0] = LED0_ON_L + 4 * channel;" line184="        buf3[1] = on &amp; 0xff;" line185="        buf3[2] = (on &gt;&gt; 8) &amp; 0xff;" line186="        buf3[3] = off &amp; 0xff;" line187="        buf3[4] = (off &gt;&gt; 8) &amp; 0xff;" line188="        pins.i2cWriteBuffer(PCA9685_ADDRESS, buf3);" line189="    }" line190="" line191="" line192="    function setStepper_28(index: number, dir: boolean): void {" line193="        if (index == 1) {" line194="            if (dir) {" line195="                setPwm(4, STP_CHA_L, STP_CHA_H);" line196="                setPwm(6, STP_CHB_L, STP_CHB_H);" line197="                setPwm(5, STP_CHC_L, STP_CHC_H);" line198="                setPwm(7, STP_CHD_L, STP_CHD_H);" line199="            } else {" line200="                setPwm(7, STP_CHA_L, STP_CHA_H);" line201="                setPwm(5, STP_CHB_L, STP_CHB_H);" line202="                setPwm(6, STP_CHC_L, STP_CHC_H);" line203="                setPwm(4, STP_CHD_L, STP_CHD_H);" line204="            }" line205="        } else {" line206="            if (dir) {" line207="                setPwm(0, STP_CHA_L, STP_CHA_H);" line208="                setPwm(2, STP_CHB_L, STP_CHB_H);" line209="                setPwm(1, STP_CHC_L, STP_CHC_H);" line210="                setPwm(3, STP_CHD_L, STP_CHD_H);" line211="            } else {" line212="                setPwm(3, STP_CHA_L, STP_CHA_H);" line213="                setPwm(1, STP_CHB_L, STP_CHB_H);" line214="                setPwm(2, STP_CHC_L, STP_CHC_H);" line215="                setPwm(0, STP_CHD_L, STP_CHD_H);" line216="            }" line217="        }" line218="    }" line219="" line220="" line221="    function setStepper_42(index: number, dir: boolean): void {" line222="        if (index == 1) {" line223="            if (dir) {" line224="                setPwm(7, BYG_CHA_L, BYG_CHA_H);" line225="                setPwm(6, BYG_CHB_L, BYG_CHB_H);" line226="                setPwm(5, BYG_CHC_L, BYG_CHC_H);" line227="                setPwm(4, BYG_CHD_L, BYG_CHD_H);" line228="            } else {" line229="                setPwm(7, BYG_CHC_L, BYG_CHC_H);" line230="                setPwm(6, BYG_CHD_L, BYG_CHD_H);" line231="                setPwm(5, BYG_CHA_L, BYG_CHA_H);" line232="                setPwm(4, BYG_CHB_L, BYG_CHB_H);" line233="            }" line234="        } else {" line235="            if (dir) {" line236="                setPwm(3, BYG_CHA_L, BYG_CHA_H);" line237="                setPwm(2, BYG_CHB_L, BYG_CHB_H);" line238="                setPwm(1, BYG_CHC_L, BYG_CHC_H);" line239="                setPwm(0, BYG_CHD_L, BYG_CHD_H);" line240="            } else {" line241="                setPwm(3, BYG_CHC_L, BYG_CHC_H);" line242="                setPwm(2, BYG_CHD_L, BYG_CHD_H);" line243="                setPwm(1, BYG_CHA_L, BYG_CHA_H);" line244="                setPwm(0, BYG_CHB_L, BYG_CHB_H);" line245="            }" line246="        }" line247="    }" line248="" line249="" line250="    /**" line251="     * Steering gear control function." line252="     * S1~S8." line253="     * 0°~180°." line254="    */" line255="    //% blockId=motor_servo block=&quot;|%index|서보모터|%degree|각도로 이동&quot;" line256="    //% weight=0" line257="    //% degree.min=0 degree.max=180" line258="    //% index.fieldEditor=&quot;gridpicker&quot; index.fieldOptions.columns=4" line259="    //% group=&quot;서보모터 제어&quot;" line260="    export function servo(index: Servos, degree: number): void {" line261="        if (!initialized) {" line262="            initPCA9685()" line263="        }" line264="        // 50hz" line265="        let v_us = (degree * 1800 / 180 + 600) // 0.6ms ~ 2.4ms" line266="        let value = v_us * 4096 / 20000" line267="        setPwm(index + 7, 0, value)" line268="    }" line269="" line270="    /**" line271="     * Execute a motor" line272="     * M1~M4." line273="     * speed(0~255)." line274="    */" line275="    //% weight=0" line276="    //% blockId=motor_MotorRun block=&quot;|%index|모터|%Dir|방향|%speed|속도로 회전&quot;" line277="    //% speed.min=0 speed.max=255" line278="    //% index.fieldEditor=&quot;gridpicker&quot; index.fieldOptions.columns=2" line279="    //% direction.fieldEditor=&quot;gridpicker&quot; direction.fieldOptions.columns=2" line280="    //% group=&quot;모터 제어(심화)&quot;" line281="    export function MotorRun(index: Motors, direction: Dir, speed: number): void {" line282="" line283="        if (!initialized) {" line284="            initPCA9685()" line285="        }" line286="" line287="        if (index === 3 || index === 4) {" line288="            direction = direction * -1;" line289="        }" line290="" line291="        speed = speed * 16 * direction; // map 255 to 4096" line292="        if (speed &gt;= 4096) {" line293="            speed = 4095" line294="        }" line295="        if (speed &lt;= -4096) {" line296="            speed = -4095" line297="        }" line298="        if (index &gt; 4 || index &lt;= 0)" line299="            return" line300="        let pn = (4 - index) * 2" line301="        let pp = (4 - index) * 2 + 1" line302="        if (speed &gt;= 0) {" line303="            setPwm(pp, 0, speed)" line304="            setPwm(pn, 0, 0)" line305="        } else {" line306="            setPwm(pp, 0, 0)" line307="            setPwm(pn, 0, -speed)" line308="        }" line309="    }" line310="" line311="    /**" line312="     * mecanum mode controll" line313="     * M1~M4." line314="     * speed(0~255)." line315="    */" line316="    //% weight=0" line317="    //% blockId=motor_MecanumRun block=&quot;|메카넘|%Mecanum|방향|%speed|속도로 이동&quot;" line318="    //% speed.min=0 speed.max=255" line319="    //% direction.fieldEditor=&quot;gridpicker&quot; direction.fieldOptions.columns=3" line320="    //% group=&quot;모터 제어(기초)&quot;" line321="    export function MecanumRun(direction: Mecanum, speed: number): void {" line322="        if (!initialized) {" line323="            initPCA9685()" line324="        }" line325="" line326="        speed = speed * 16; // map 255 to 4096" line327="" line328="        if (speed &gt;= 4096) {" line329="            speed = 4095" line330="        }" line331="        if (speed &lt;= -4096) {" line332="            speed = -4095" line333="        }" line334="        // motor controll" line335="        // 1  2  3  |  ↖  ↑  ↗" line336="        // 4  5  6  |  ←   s  →" line337="        // 7  8  9  |  ↙  ↓  ↘" line338="        if (direction == 1) {" line339="            // M1 foward" line340="            setPwm(7, 0, speed);" line341="            setPwm(6, 0, 0);" line342="" line343="            // M2 stop" line344="            setPwm(5, 0, 0);" line345="            setPwm(4, 0, 0);" line346="" line347="            // M3 foward" line348="            setPwm(3, 0, 0);" line349="            setPwm(2, 0, speed);" line350="" line351="            // M4 stop" line352="            setPwm(1, 0, 0);" line353="            setPwm(0, 0, 0);" line354="        }" line355="" line356="        if (direction == 2) {" line357="            // M1 foward" line358="            setPwm(7, 0, speed);" line359="            setPwm(6, 0, 0);" line360="" line361="            // M2 foward" line362="            setPwm(5, 0, speed);" line363="            setPwm(4, 0, 0);" line364="" line365="            // M3 foward" line366="            setPwm(3, 0, 0);" line367="            setPwm(2, 0, speed);" line368="" line369="            // M4 foward" line370="            setPwm(1, 0, 0);" line371="            setPwm(0, 0, speed);" line372="        }" line373="" line374="        if (direction == 3) {" line375="            // M1 stop" line376="            setPwm(7, 0, 0);" line377="            setPwm(6, 0, 0);" line378="" line379="            // M2 foward" line380="            setPwm(5, 0, speed);" line381="            setPwm(4, 0, 0);" line382="" line383="            // M3 stop" line384="            setPwm(3, 0, 0);" line385="            setPwm(2, 0, 0);" line386="" line387="            // M4 foward" line388="            setPwm(1, 0, 0);" line389="            setPwm(0, 0, speed);" line390="        }" line391="" line392="        if (direction == 4) {" line393="            // M1 foward" line394="            setPwm(7, 0, speed);" line395="            setPwm(6, 0, 0);" line396="" line397="            // M2 backward" line398="            setPwm(5, 0, 0);" line399="            setPwm(4, 0, speed);" line400="" line401="            // M3 foward" line402="            setPwm(3, 0, 0);" line403="            setPwm(2, 0, speed);" line404="" line405="            // M4 backward" line406="            setPwm(1, 0, speed);" line407="            setPwm(0, 0, 0);" line408="        }" line409="" line410="        if (direction == 5) {" line411="            // M1 stop" line412="            setPwm(7, 0, 0);" line413="            setPwm(6, 0, 0);" line414="" line415="            // M2 stop" line416="            setPwm(5, 0, 0);" line417="            setPwm(4, 0, 0);" line418="" line419="            // M3 stop" line420="            setPwm(3, 0, 0);" line421="            setPwm(2, 0, 0);" line422="" line423="            // M4 stop" line424="            setPwm(1, 0, 0);" line425="            setPwm(0, 0, 0);" line426="        }" line427="" line428="        if (direction == 6) {" line429="            // M1 backward" line430="            setPwm(7, 0, 0);" line431="            setPwm(6, 0, speed);" line432="" line433="            // M2 foward" line434="            setPwm(5, 0, speed);" line435="            setPwm(4, 0, 0);" line436="" line437="            // M3 backward" line438="            setPwm(3, 0, speed);" line439="            setPwm(2, 0, 0);" line440="" line441="            // M4 foward" line442="            setPwm(1, 0, 0);" line443="            setPwm(0, 0, speed);" line444="        }" line445="" line446="        if (direction == 7) {" line447="            // M1 stop" line448="            setPwm(7, 0, 0);" line449="            setPwm(6, 0, 0);" line450="" line451="            // M2 backward" line452="            setPwm(5, 0, 0);" line453="            setPwm(4, 0, speed);" line454="" line455="            // M3 stop" line456="            setPwm(3, 0, 0);" line457="            setPwm(2, 0, 0);" line458="" line459="            // M4 backward" line460="            setPwm(1, 0, speed);" line461="            setPwm(0, 0, 0);" line462="        }" line463="" line464="        if (direction == 8) {" line465="            // M1 backward" line466="            setPwm(7, 0, 0);" line467="            setPwm(6, 0, speed);" line468="" line469="            // M2 backward" line470="            setPwm(5, 0, 0);" line471="            setPwm(4, 0, speed);" line472="" line473="            // M3 backward" line474="            setPwm(3, 0, speed);" line475="            setPwm(2, 0, 0);" line476="" line477="            // M4 backward" line478="            setPwm(1, 0, speed);" line479="            setPwm(0, 0, 0);" line480="        }" line481="" line482="        if (direction == 9) {" line483="            // M1 backward" line484="            setPwm(7, 0, 0);" line485="            setPwm(6, 0, speed);" line486="" line487="            // M2 stop" line488="            setPwm(5, 0, 0);" line489="            setPwm(4, 0, 0);" line490="" line491="            // M3 backward" line492="            setPwm(3, 0, speed);" line493="            setPwm(2, 0, 0);" line494="" line495="            // M4 stop" line496="            setPwm(1, 0, 0);" line497="            setPwm(0, 0, 0);" line498="        }" line499="    }" line500="" line501="    /**" line502="     * Stop the dc motor." line503="    */" line504="    //% weight=0" line505="    //% blockId=motor_motorStop block=&quot;|%index|모터 정지&quot;" line506="    //% index.fieldEditor=&quot;gridpicker&quot; index.fieldOptions.columns=2 " line507="    //% group=&quot;모터 제어(심화)&quot;" line508="    export function motorStop(index: Motors) {" line509="        setPwm((4 - index) * 2, 0, 0);" line510="        setPwm((4 - index) * 2 + 1, 0, 0);" line511="    }" line512="" line513="    /**" line514="     * Stop all motors" line515="    */" line516="    //% weight=20" line517="    //% blockId=motor_motorStopAll block=&quot;|모든 모터 정지&quot;" line518="    //% group=&quot;모터 제어(기초)&quot;" line519="    export function motorStopAll(): void {" line520="        for (let idx = 1; idx &lt;= 4; idx++) {" line521="            motorStop(idx);" line522="        }" line523="    }" line524="" line525="    /**" line526="        * noraml mode controll" line527="        * M1~M4." line528="        * speed(0~255)." line529="       */" line530="    //% weight=0" line531="    //% blockId=motor_NormalRun block=&quot;|포니봇|%Mecanum|방향|%speed|속도로 이동&quot;" line532="    //% speed.min=0 speed.max=255" line533="    //% DirControll.fieldEditor=&quot;gridpicker&quot; DirControll.fieldOptions.columns=2" line534="    //% group=&quot;모터 제어(기초)&quot;" line535="    export function NomalRun(direction: DirControll, speed: number): void {" line536="        if (!initialized) {" line537="            initPCA9685()" line538="        }" line539="" line540="        speed = speed * 16; // map 255 to 4096" line541="" line542="        if (speed &gt;= 4096) {" line543="            speed = 4095" line544="        }" line545="        if (speed &lt;= -4096) {" line546="            speed = -4095" line547="        }" line548="" line549="        if (direction == 1) {" line550="            // M1 foward" line551="            setPwm(7, 0, speed);" line552="            setPwm(6, 0, 0);" line553="" line554="            // M2 foward" line555="            setPwm(5, 0, speed);" line556="            setPwm(4, 0, 0);" line557="" line558="            // M3 foward" line559="            setPwm(3, 0, 0);" line560="            setPwm(2, 0, speed);" line561="" line562="            // M4 foward" line563="            setPwm(1, 0, 0);" line564="            setPwm(0, 0, speed);" line565="        }" line566="" line567="" line568="        if (direction == 2) {" line569="            // M1 backward" line570="            setPwm(7, 0, 0);" line571="            setPwm(6, 0, speed);" line572="" line573="            // M2 backward" line574="            setPwm(5, 0, 0);" line575="            setPwm(4, 0, speed);" line576="" line577="            // M3 backward" line578="            setPwm(3, 0, speed);" line579="            setPwm(2, 0, 0);" line580="" line581="            // M4 backward" line582="            setPwm(1, 0, speed);" line583="            setPwm(0, 0, 0);" line584="        }" line585="" line586="        if (direction == 3) {" line587="            // M1 foward" line588="            setPwm(7, 0, speed);" line589="            setPwm(6, 0, 0);" line590="" line591="            // M2 foward" line592="            setPwm(5, 0, speed);" line593="            setPwm(4, 0, 0);" line594="" line595="            // M3 backward" line596="            setPwm(3, 0, speed);" line597="            setPwm(2, 0, 0);" line598="" line599="            // M4 backward" line600="            setPwm(1, 0, speed);" line601="            setPwm(0, 0, 0);" line602="        }" line603="" line604="        if (direction == 4) {" line605="            // M1 backward" line606="            setPwm(7, 0, 0);" line607="            setPwm(6, 0, speed);" line608="" line609="            // M2 backward" line610="            setPwm(5, 0, 0);" line611="            setPwm(4, 0, speed);" line612="" line613="            // M3 backward" line614="            setPwm(3, 0, 0);" line615="            setPwm(2, 0, speed);" line616="" line617="            // M4 backward" line618="            setPwm(1, 0, 0);" line619="            setPwm(0, 0, speed);" line620="        }" line621="    }" line622="" line623="    /**" line624="    * ---------------line sensor-------------------" line625="    */" line626="    export enum twoLineState {" line627="        //% block=&quot;◌ ◌ &quot; " line628="        two_line_State_0 = 0," line629="        //% block=&quot;● ●&quot; " line630="        two_line_State_1 = 1," line631="        //% block=&quot;● ◌&quot; " line632="        two_line_State_2 = 2," line633="        //% block=&quot;◌ ●&quot; " line634="        two_line_State_3 = 3," line635="    }" line636="" line637="    export enum lineState {" line638="        //% block=&quot;◌&quot; " line639="        line_State_0 = 0," line640="        //% block=&quot;●&quot; " line641="        line_State_1 = 1" line642="    }" line643="" line644="    export enum lineSensorChannel {" line645="        //% block=&quot;왼쪽&quot;" line646="        reft = 1," line647="        //% block=&quot;오른쪽&quot;" line648="        right = 2," line649="    }" line650="" line651="    //% blockId=&quot;check_two_line_state&quot;" line652="    //% block=&quot;두 라인 센서의 값이 %state&quot;" line653="    //% state.shadow=&quot;dropdown&quot;" line654="    //% group=&quot;라인 감지 센서&quot;" line655="    //% weight=0" line656="    export function checkTwoLineState(state: twoLineState): boolean {" line657="        const leftSensor = pins.digitalReadPin(DigitalPin.P16);" line658="        const rightSensor = pins.digitalReadPin(DigitalPin.P15);" line659="" line660="        switch (state) {" line661="            case twoLineState.two_line_State_0:" line662="                return leftSensor === 0 &amp;&amp; rightSensor === 0;" line663="            case twoLineState.two_line_State_1:" line664="                return leftSensor === 1 &amp;&amp; rightSensor === 1;" line665="            case twoLineState.two_line_State_2:" line666="                return leftSensor === 1 &amp;&amp; rightSensor === 0;" line667="            case twoLineState.two_line_State_3:" line668="                return leftSensor === 0 &amp;&amp; rightSensor === 1;" line669="            default:" line670="                return false;" line671="        }" line672="    }" line673="" line674="    //% blockId=&quot;check_single_line_sensor&quot;" line675="    //% block=&quot;%channel 라인 센서의 값이 %state&quot;" line676="    //% channel.shadow=&quot;dropdown&quot;" line677="    //% state.shadow=&quot;dropdown&quot;" line678="    //% group=&quot;라인 감지 센서&quot;" line679="    //% weight=0" line680="    export function checkSingleLineSensor(channel: lineSensorChannel, state: lineState): boolean {" line681="        const sensorValue = channel === lineSensorChannel.reft" line682="            ? pins.digitalReadPin(DigitalPin.P16)" line683="            : pins.digitalReadPin(DigitalPin.P15);" line684="" line685="        return sensorValue === state;" line686="    }" line687="" line688="    //% blockId=&quot;read_line_sensor&quot;" line689="    //% block=&quot;%channel 라인 센서 값 읽기&quot;" line690="    //% channel.shadow=&quot;dropdown&quot;" line691="    //% group=&quot;라인 감지 센서&quot;" line692="    //% weight=0" line693="    export function readLineSensor(channel: lineSensorChannel): number {" line694="        return channel === lineSensorChannel.reft" line695="            ? pins.digitalReadPin(DigitalPin.P16)" line696="            : pins.digitalReadPin(DigitalPin.P15);" line697="    }" line698="" line699="    /**" line700="    * ---------------sonar sensor-------------------" line701="    */" line702="    export enum PingUnit {" line703="        //% block=&quot;마이크로초&quot;" line704="        MicroSeconds," line705="        //% block=&quot;센티미터&quot;" line706="        Centimeters," line707="        //% block=&quot;인치&quot;" line708="        Inches" line709="    }" line710="" line711="    //% blockId=sonar_ping " line712="    //% block=&quot;%unit 단위로 측정한 거리&quot;" line713="    //% unit.shadow=&quot;dropdown&quot;" line714="    //% group=&quot;거리 감지 센서&quot;" line715="    //% weight=0" line716="    export function ping(unit: PingUnit, maxCmDistance = 500): number {" line717="        const trig = DigitalPin.P13; // Trig 핀 기본값" line718="        const echo = DigitalPin.P14; // Echo 핀 기본값" line719="        // send pulse" line720="        pins.setPull(trig, PinPullMode.PullNone);" line721="        pins.digitalWritePin(trig, 0);" line722="        control.waitMicros(2);" line723="        pins.digitalWritePin(trig, 1);" line724="        control.waitMicros(10);" line725="        pins.digitalWritePin(trig, 0);" line726="" line727="        // read pulse" line728="        const d = pins.pulseIn(echo, PulseValue.High, maxCmDistance * 58);" line729="" line730="        switch (unit) {" line731="            case PingUnit.Centimeters: return Math.idiv(d, 58);" line732="            case PingUnit.Inches: return Math.idiv(d, 148);" line733="            default: return d;" line734="        }" line735="    }" line736="" line737="    /**" line738="    * ---------------color sensor-------------------" line739="    */" line740="    export enum DetectedColor {" line741="        //% block=&quot;빨간색&quot;" line742="        Red," line743="        //% block=&quot;초록색&quot;" line744="        Green," line745="        //% block=&quot;파란색&quot;" line746="        Blue" line747="    }" line748="" line749="    class tcs3472 {" line750="        is_setup: boolean" line751="        addr: number" line752="        leds: DigitalPin" line753="" line754="        constructor(addr: number) {" line755="            this.is_setup = false" line756="            this.addr = addr" line757="        }" line758="" line759="        setup(): void {" line760="            if (this.is_setup) return" line761="            this.is_setup = true" line762="            smbus.writeByte(this.addr, 0x80, 0x03)" line763="            smbus.writeByte(this.addr, 0x81, 0x2b)" line764="        }" line765="" line766="        setIntegrationTime(time: number): void {" line767="            this.setup()" line768="            time = Math.clamp(0, 255, time * 10 / 24)" line769="            smbus.writeByte(this.addr, 0x81, 255 - time)" line770="        }" line771="" line772="        light(): number {" line773="            return this.raw()[0]" line774="        }" line775="" line776="        rgb(): number[] {" line777="            let result: number[] = this.raw()" line778="            let clear: number = result.shift()" line779="            for (let x: number = 0; x &lt; result.length; x++) {" line780="                result[x] = result[x] * 255 / clear" line781="            }" line782="            return result" line783="        }" line784="" line785="        raw(): number[] {" line786="            this.setup()" line787="            let result2: Buffer = smbus.readBuffer(this.addr, 0xb4, pins.sizeOf(NumberFormat.UInt16LE) * 4)" line788="            return smbus.unpack(&quot;HHHH&quot;, result2)" line789="        }" line790="    }" line791="" line792="    let _tcs3472: tcs3472 = new tcs3472(0x29)" line793="" line794="    /**" line795="     * 밝기 레벨 센싱" line796="     */" line797="    //% blockId=brickcell_color_tcs34725_get_light" line798="    //% block=&quot;밝기(B) 값 읽기&quot;" line799="    //% group=&quot;색상 감지 센서&quot;" line800="    export function getLight(): number {" line801="        return Math.round(_tcs3472.light())" line802="    }" line803="" line804="    /**" line805="     * R 데이터 센싱" line806="     */" line807="    //% blockId=brickcell_color_tcs34725__get_red" line808="    //% block=&quot;빨간색(R) 색상 값 읽기&quot;" line809="    //% group=&quot;색상 감지 센서&quot;" line810="    export function getRed(): number {" line811="        return Math.round(_tcs3472.rgb()[0]);" line812="    }" line813="" line814="    /**" line815="     * G 데이터 센싱" line816="     */" line817="    //% blockId=brickcell_color_tcs34725_get_green" line818="    //% block=&quot;초록색(G) 색상 값 읽기&quot;" line819="    //% group=&quot;색상 감지 센서&quot;" line820="    export function getGreen(): number {" line821="        return Math.round(_tcs3472.rgb()[1]);" line822="    }" line823="" line824="    /**" line825="     * B 데이터 센싱" line826="     */" line827="    //% blockId=brickcell_color_tcs34725_get_blue" line828="    //% block=&quot;파란색(B) 색상 값 읽기&quot;" line829="    //% group=&quot;색상 감지 센서&quot;" line830="    export function getBlue(): number {" line831="        return Math.round(_tcs3472.rgb()[2]);" line832="    }" line833="" line834="    /**" line835="     * Set the integration time of the colour sensor in ms" line836="     */" line837="    //% blockId=brickcell_color_tcs34725_set_integration_time" line838="    //% block=&quot;색상 통합 시간을 %time ms로 설정&quot;" line839="    //% time.min=0 time.max=612 value.defl=500" line840="    //% group=&quot;색상 감지 센서&quot;" line841="    export function setColourIntegrationTime(time: number): void {" line842="        return _tcs3472.setIntegrationTime(time)" line843="    }" line844="" line845="    /**" line846="     * 감지된 색상이 지정된 색상인지 확인" line847="     */" line848="    //% blockId=color_sensor_is_color" line849="    //% block=&quot;감지된 색상이 %color&quot;" line850="    //% group=&quot;색상 감지 센서&quot;" line851="    export function isColor(color: DetectedColor): boolean {" line852="        const rgb = _tcs3472.rgb();" line853="        const r = rgb[0];" line854="        const g = rgb[1];" line855="        const b = rgb[2];" line856="" line857="        let maxColorValue = r; // 기본적으로 r을 최대값으로 가정합니다." line858="        if (g &gt; maxColorValue) {" line859="            maxColorValue = g; // g가 r보다 크면 g를 최대값으로 설정합니다." line860="        }" line861="        if (b &gt; maxColorValue) {" line862="            maxColorValue = b; // b가 현재 최대값보다 크면 b를 최대값으로 설정합니다." line863="        }" line864="" line865="        switch (color) {" line866="            case DetectedColor.Red:" line867="                return r === maxColorValue &amp;&amp; r &gt; g &amp;&amp; r &gt; b; // 빨간색이 가장 큰 값일 경우" line868="            case DetectedColor.Green:" line869="                return g === maxColorValue &amp;&amp; g &gt; r &amp;&amp; g &gt; b; // 초록색이 가장 큰 값일 경우" line870="            case DetectedColor.Blue:" line871="                return b === maxColorValue &amp;&amp; b &gt; r &amp;&amp; b &gt; g; // 파란색이 가장 큰 값일 경우" line872="            default:" line873="                return false;" line874="        }" line875="    }" line876="" line877="    /**" line878="    * ---------------oled display(elecfrik)-------------------" line879="       let font: Buffer;" line880="   " line881="       const SSD1306_SETCONTRAST = 0x81" line882="       const SSD1306_SETCOLUMNADRESS = 0x21" line883="       const SSD1306_SETPAGEADRESS = 0x22" line884="       const SSD1306_DISPLAYALLON_RESUME = 0xA4" line885="       const SSD1306_DISPLAYALLON = 0xA5" line886="       const SSD1306_NORMALDISPLAY = 0xA6" line887="       const SSD1306_INVERTDISPLAY = 0xA7" line888="       const SSD1306_DISPLAYOFF = 0xAE" line889="       const SSD1306_DISPLAYON = 0xAF" line890="       const SSD1306_SETDISPLAYOFFSET = 0xD3" line891="       const SSD1306_SETCOMPINS = 0xDA" line892="       const SSD1306_SETVCOMDETECT = 0xDB" line893="       const SSD1306_SETDISPLAYCLOCKDIV = 0xD5" line894="       const SSD1306_SETPRECHARGE = 0xD9" line895="       const SSD1306_SETMULTIPLEX = 0xA8" line896="       const SSD1306_SETLOWCOLUMN = 0x00" line897="       const SSD1306_SETHIGHCOLUMN = 0x10" line898="       const SSD1306_SETSTARTLINE = 0x40" line899="       const SSD1306_MEMORYMODE = 0x20" line900="       const SSD1306_COMSCANINC = 0xC0" line901="       const SSD1306_COMSCANDEC = 0xC8" line902="       const SSD1306_SEGREMAP = 0xA0" line903="       const SSD1306_CHARGEPUMP = 0x8D" line904="       const chipAdress = 0x3C" line905="       const xOffset = 0" line906="       const yOffset = 0" line907="       let charX = 0" line908="       let charY = 0" line909="       let displayWidth = 128" line910="       let displayHeight = 64 / 8" line911="       let screenSize = 0" line912="       //let font: Array&lt;Array&lt;number&gt;&gt;" line913="       let loadStarted: boolean;" line914="       let loadPercent: number;" line915="       function command(cmd: number) {" line916="           let buf = pins.createBuffer(2)" line917="           buf[0] = 0x00" line918="           buf[1] = cmd" line919="           pins.i2cWriteBuffer(chipAdress, buf, false)" line920="       }" line921="   " line922="       //% group=&quot;디스플레이 설정&quot;" line923="       //% block=&quot;디스플레이 사용 시작&quot;" line924="       //% width.defl=128" line925="       //% height.defl=64" line926="       export function init() {" line927="           command(SSD1306_DISPLAYOFF);" line928="           command(SSD1306_SETDISPLAYCLOCKDIV);" line929="           command(0x80);                                  // the suggested ratio 0x80" line930="           command(SSD1306_SETMULTIPLEX);" line931="           command(0x3F);" line932="           command(SSD1306_SETDISPLAYOFFSET);" line933="           command(0x0);                                   // no offset" line934="           command(SSD1306_SETSTARTLINE | 0x0);            // line #0" line935="           command(SSD1306_CHARGEPUMP);" line936="           command(0x14);" line937="           command(SSD1306_MEMORYMODE);" line938="           command(0x00);                                  // 0x0 act like ks0108" line939="           command(SSD1306_SEGREMAP | 0x1);" line940="           command(SSD1306_COMSCANDEC);" line941="           command(SSD1306_SETCOMPINS);" line942="           command(0x12);" line943="           command(SSD1306_SETCONTRAST);" line944="           command(0xCF);" line945="           command(SSD1306_SETPRECHARGE);" line946="           command(0xF1);" line947="           command(SSD1306_SETVCOMDETECT);" line948="           command(0x40);" line949="           command(SSD1306_DISPLAYALLON_RESUME);" line950="           command(SSD1306_NORMALDISPLAY);" line951="           command(SSD1306_DISPLAYON);" line952="           displayWidth = 128" line953="           displayHeight = 64 / 8" line954="           screenSize = displayWidth * displayHeight" line955="           charX = xOffset" line956="           charY = yOffset" line957="           font = hex`" line958="       0000000000" line959="       3E5B4F5B3E" line960="       3E6B4F6B3E" line961="       1C3E7C3E1C" line962="       183C7E3C18" line963="       1C577D571C" line964="       1C5E7F5E1C" line965="       00183C1800" line966="       FFE7C3E7FF" line967="       0018241800" line968="       FFE7DBE7FF" line969="       30483A060E" line970="       2629792926" line971="       407F050507" line972="       407F05253F" line973="       5A3CE73C5A" line974="       7F3E1C1C08" line975="       081C1C3E7F" line976="       14227F2214" line977="       5F5F005F5F" line978="       06097F017F" line979="       006689956A" line980="       6060606060" line981="       94A2FFA294" line982="       08047E0408" line983="       10207E2010" line984="       08082A1C08" line985="       081C2A0808" line986="       1E10101010" line987="       0C1E0C1E0C" line988="       30383E3830" line989="       060E3E0E06" line990="       0000000000" line991="       00005F0000" line992="       0007000700" line993="       147F147F14" line994="       242A7F2A12" line995="       2313086462" line996="       3649562050" line997="       0008070300" line998="       001C224100" line999="       0041221C00" line1000="       2A1C7F1C2A" line1001="       08083E0808" line1002="       0080703000" line1003="       0808080808" line1004="       0000606000" line1005="       2010080402" line1006="       3E5149453E" line1007="       00427F4000" line1008="       7249494946" line1009="       2141494D33" line1010="       1814127F10" line1011="       2745454539" line1012="       3C4A494931" line1013="       4121110907" line1014="       3649494936" line1015="       464949291E" line1016="       0000140000" line1017="       0040340000" line1018="       0008142241" line1019="       1414141414" line1020="       0041221408" line1021="       0201590906" line1022="       3E415D594E" line1023="       7C1211127C" line1024="       7F49494936" line1025="       3E41414122" line1026="       7F4141413E" line1027="       7F49494941" line1028="       7F09090901" line1029="       3E41415173" line1030="       7F0808087F" line1031="       00417F4100" line1032="       2040413F01" line1033="       7F08142241" line1034="       7F40404040" line1035="       7F021C027F" line1036="       7F0408107F" line1037="       3E4141413E" line1038="       7F09090906" line1039="       3E4151215E" line1040="       7F09192946" line1041="       2649494932" line1042="       03017F0103" line1043="       3F4040403F" line1044="       1F2040201F" line1045="       3F4038403F" line1046="       6314081463" line1047="       0304780403" line1048="       6159494D43" line1049="       007F414141" line1050="       0204081020" line1051="       004141417F" line1052="       0402010204" line1053="       4040404040" line1054="       0003070800" line1055="       2054547840" line1056="       7F28444438" line1057="       3844444428" line1058="       384444287F" line1059="       3854545418" line1060="       00087E0902" line1061="       18A4A49C78" line1062="       7F08040478" line1063="       00447D4000" line1064="       2040403D00" line1065="       7F10284400" line1066="       00417F4000" line1067="       7C04780478" line1068="       7C08040478" line1069="       3844444438" line1070="       FC18242418" line1071="       18242418FC" line1072="       7C08040408" line1073="       4854545424" line1074="       04043F4424" line1075="       3C4040207C" line1076="       1C2040201C" line1077="       3C4030403C" line1078="       4428102844" line1079="       4C9090907C" line1080="       4464544C44" line1081="       0008364100" line1082="       0000770000" line1083="       0041360800" line1084="       0201020402" line1085="       3C2623263C" line1086="       1EA1A16112" line1087="       3A4040207A" line1088="       3854545559" line1089="       2155557941" line1090="       2154547841" line1091="       2155547840" line1092="       2054557940" line1093="       0C1E527212" line1094="       3955555559" line1095="       3954545459" line1096="       3955545458" line1097="       0000457C41" line1098="       0002457D42" line1099="       0001457C40" line1100="       F0292429F0" line1101="       F0282528F0" line1102="       7C54554500" line1103="       2054547C54" line1104="       7C0A097F49" line1105="       3249494932" line1106="       3248484832" line1107="       324A484830" line1108="       3A4141217A" line1109="       3A42402078" line1110="       009DA0A07D" line1111="       3944444439" line1112="       3D4040403D" line1113="       3C24FF2424" line1114="       487E494366" line1115="       2B2FFC2F2B" line1116="       FF0929F620" line1117="       C0887E0903" line1118="       2054547941" line1119="       0000447D41" line1120="       3048484A32" line1121="       384040227A" line1122="       007A0A0A72" line1123="       7D0D19317D" line1124="       2629292F28" line1125="       2629292926" line1126="       30484D4020" line1127="       3808080808" line1128="       0808080838" line1129="       2F10C8ACBA" line1130="       2F102834FA" line1131="       00007B0000" line1132="       08142A1422" line1133="       22142A1408" line1134="       AA005500AA" line1135="       AA55AA55AA" line1136="       000000FF00" line1137="       101010FF00" line1138="       141414FF00" line1139="       1010FF00FF" line1140="       1010F010F0" line1141="       141414FC00" line1142="       1414F700FF" line1143="       0000FF00FF" line1144="       1414F404FC" line1145="       141417101F" line1146="       10101F101F" line1147="       1414141F00" line1148="       101010F000" line1149="       0000001F10" line1150="       1010101F10" line1151="       101010F010" line1152="       000000FF10" line1153="       1010101010" line1154="       101010FF10" line1155="       000000FF14" line1156="       0000FF00FF" line1157="       00001F1017" line1158="       0000FC04F4" line1159="       1414171017" line1160="       1414F404F4" line1161="       0000FF00F7" line1162="       1414141414" line1163="       1414F700F7" line1164="       1414141714" line1165="       10101F101F" line1166="       141414F414" line1167="       1010F010F0" line1168="       00001F101F" line1169="       0000001F14" line1170="       000000FC14" line1171="       0000F010F0" line1172="       1010FF10FF" line1173="       141414FF14" line1174="       1010101F00" line1175="       000000F010" line1176="       FFFFFFFFFF" line1177="       F0F0F0F0F0" line1178="       FFFFFF0000" line1179="       000000FFFF" line1180="       0F0F0F0F0F" line1181="       3844443844" line1182="       7C2A2A3E14" line1183="       7E02020606" line1184="       027E027E02" line1185="       6355494163" line1186="       3844443C04" line1187="       407E201E20" line1188="       06027E0202" line1189="       99A5E7A599" line1190="       1C2A492A1C" line1191="       4C7201724C" line1192="       304A4D4D30" line1193="       3048784830" line1194="       BC625A463D" line1195="       3E49494900" line1196="       7E0101017E" line1197="       2A2A2A2A2A" line1198="       44445F4444" line1199="       40514A4440" line1200="       40444A5140" line1201="       0000FF0103" line1202="       E080FF0000" line1203="       08086B6B08" line1204="       3612362436" line1205="       060F090F06" line1206="       0000181800" line1207="       0000101000" line1208="       3040FF0101" line1209="       001F01011E" line1210="       00191D1712" line1211="       003C3C3C3C" line1212="       0000000000`" line1213="           loadStarted = false" line1214="           loadPercent = 0" line1215="           clear()" line1216="       }" line1217="   " line1218="       //% group=&quot;디스플레이 제어(기초)&quot;" line1219="       //% weight=6" line1220="       //% block=&quot;디스플레이 지움&quot;" line1221="       export function clear() {" line1222="           loadStarted = false" line1223="           loadPercent = 0" line1224="           command(SSD1306_SETCOLUMNADRESS)" line1225="           command(0x00)" line1226="           command(displayWidth - 1)" line1227="           command(SSD1306_SETPAGEADRESS)" line1228="           command(0x00)" line1229="           command(displayHeight - 1)" line1230="           let data = pins.createBuffer(17);" line1231="           data[0] = 0x40; // Data Mode" line1232="           for (let i = 1; i &lt; 17; i++) {" line1233="               data[i] = 0x00" line1234="           }" line1235="           // send display buffer in 16 byte chunks" line1236="           for (let i = 0; i &lt; screenSize; i += 16) {" line1237="               pins.i2cWriteBuffer(chipAdress, data, false)" line1238="           }" line1239="           charX = xOffset" line1240="           charY = yOffset" line1241="       }" line1242="   " line1243="       //% group=&quot;디스플레이 제어(기초)&quot;" line1244="       //% block=&quot;(줄바꿈 없이) 화면에 $str 문장 출력&quot;" line1245="       export function writeString(str: string) {" line1246="           for (let i = 0; i &lt; str.length; i++) {" line1247="               if (charX &gt; displayWidth - 6) {" line1248="                   newLine()" line1249="               }" line1250="               drawChar(charX, charY, str.charAt(i))" line1251="               charX += 6" line1252="           }" line1253="       }" line1254="   " line1255="       //% group=&quot;디스플레이 제어(기초)&quot;" line1256="       //% block=&quot;(줄바꿈 없이) 화면에 $n 숫자 출력&quot;" line1257="       export function writeNum(n: number) {" line1258="           let numString = n.toString()" line1259="           writeString(numString)" line1260="       }" line1261="   " line1262="       //% group=&quot;디스플레이 제어(기초)&quot;" line1263="       //% block=&quot;화면에 $str 문장 출력&quot;" line1264="       export function writeStringNewLine(str: string) {" line1265="           writeString(str)" line1266="           newLine()" line1267="       }" line1268="   " line1269="       //% group=&quot;디스플레이 제어(기초)&quot;" line1270="       //% block=&quot;화면에 $n 숫자 출력&quot;" line1271="       export function writeNumNewLine(n: number) {" line1272="           writeNum(n)" line1273="           newLine()" line1274="       }" line1275="   " line1276="       //% group=&quot;디스플레이 제어(기초)&quot;" line1277="       //% weight=5" line1278="       //% block=&quot;줄 바꿈&quot;" line1279="       export function newLine() {" line1280="           charY++" line1281="           charX = xOffset" line1282="       }" line1283="   " line1284="       function drawChar(x: number, y: number, c: string) {" line1285="           command(SSD1306_SETCOLUMNADRESS)" line1286="           command(x)" line1287="           command(x + 5)" line1288="           command(SSD1306_SETPAGEADRESS)" line1289="           command(y)" line1290="           command(y + 1)" line1291="           let line = pins.createBuffer(2)" line1292="           line[0] = 0x40" line1293="           for (let i = 0; i &lt; 6; i++) {" line1294="               if (i === 5) {" line1295="                   line[1] = 0x00" line1296="               } else {" line1297="                   let charIndex = c.charCodeAt(0)" line1298="                   let charNumber = font.getNumber(NumberFormat.UInt8BE, 5 * charIndex + i)" line1299="                   line[1] = charNumber" line1300="   " line1301="               }" line1302="               pins.i2cWriteBuffer(chipAdress, line, false)" line1303="           }" line1304="   " line1305="       }" line1306="       function drawShape(pixels: Array&lt;Array&lt;number&gt;&gt;) {" line1307="           let x1 = displayWidth" line1308="           let y1 = displayHeight * 8" line1309="           let x2 = 0" line1310="           let y2 = 0" line1311="           for (let i = 0; i &lt; pixels.length; i++) {" line1312="               if (pixels[i][0] &lt; x1) {" line1313="                   x1 = pixels[i][0]" line1314="               }" line1315="               if (pixels[i][0] &gt; x2) {" line1316="                   x2 = pixels[i][0]" line1317="               }" line1318="               if (pixels[i][1] &lt; y1) {" line1319="                   y1 = pixels[i][1]" line1320="               }" line1321="               if (pixels[i][1] &gt; y2) {" line1322="                   y2 = pixels[i][1]" line1323="               }" line1324="           }" line1325="           let page1 = Math.floor(y1 / 8)" line1326="           let page2 = Math.floor(y2 / 8)" line1327="           let line = pins.createBuffer(2)" line1328="           line[0] = 0x40" line1329="           for (let x = x1; x &lt;= x2; x++) {" line1330="               for (let page = page1; page &lt;= page2; page++) {" line1331="                   line[1] = 0x00" line1332="                   for (let i = 0; i &lt; pixels.length; i++) {" line1333="                       if (pixels[i][0] === x) {" line1334="                           if (Math.floor(pixels[i][1] / 8) === page) {" line1335="                               line[1] |= Math.pow(2, (pixels[i][1] % 8))" line1336="                           }" line1337="                       }" line1338="                   }" line1339="                   if (line[1] !== 0x00) {" line1340="                       command(SSD1306_SETCOLUMNADRESS)" line1341="                       command(x)" line1342="                       command(x + 1)" line1343="                       command(SSD1306_SETPAGEADRESS)" line1344="                       command(page)" line1345="                       command(page + 1)" line1346="                       //line[1] |= pins.i2cReadBuffer(chipAdress, 2)[1]" line1347="                       pins.i2cWriteBuffer(chipAdress, line, false)" line1348="                   }" line1349="               }" line1350="           }" line1351="       }" line1352="   " line1353="       //% group=&quot;디스플레이 제어(심화)&quot;" line1354="       //% weight=4" line1355="       //% block=&quot;라인 출력:|x: $x0 y: $y0 에서| x: $x1 y: $y1|까지&quot;" line1356="       //% x0.defl=0" line1357="       //% y0.defl=0" line1358="       //% x1.defl=20" line1359="       //% y1.defl=20" line1360="       export function drawLine(x0: number, y0: number, x1: number, y1: number) {" line1361="           let pixels: Array&lt;Array&lt;number&gt;&gt; = []" line1362="           let kx: number, ky: number, c: number, i: number, xx: number, yy: number, dx: number, dy: number;" line1363="           let targetX = x1" line1364="           let targetY = y1" line1365="           x1 -= x0; kx = 0; if (x1 &gt; 0) kx = +1; if (x1 &lt; 0) { kx = -1; x1 = -x1; } x1++;" line1366="           y1 -= y0; ky = 0; if (y1 &gt; 0) ky = +1; if (y1 &lt; 0) { ky = -1; y1 = -y1; } y1++;" line1367="           if (x1 &gt;= y1) {" line1368="               c = x1" line1369="               for (i = 0; i &lt; x1; i++ , x0 += kx) {" line1370="                   pixels.push([x0, y0])" line1371="                   c -= y1; if (c &lt;= 0) { if (i != x1 - 1) pixels.push([x0 + kx, y0]); c += x1; y0 += ky; if (i != x1 - 1) pixels.push([x0, y0]); }" line1372="                   if (pixels.length &gt; 20) {" line1373="                       drawShape(pixels)" line1374="                       pixels = []" line1375="                       drawLine(x0, y0, targetX, targetY)" line1376="                       return" line1377="                   }" line1378="               }" line1379="           } else {" line1380="               c = y1" line1381="               for (i = 0; i &lt; y1; i++ , y0 += ky) {" line1382="                   pixels.push([x0, y0])" line1383="                   c -= x1; if (c &lt;= 0) { if (i != y1 - 1) pixels.push([x0, y0 + ky]); c += y1; x0 += kx; if (i != y1 - 1) pixels.push([x0, y0]); }" line1384="                   if (pixels.length &gt; 20) {" line1385="                       drawShape(pixels)" line1386="                       pixels = []" line1387="                       drawLine(x0, y0, targetX, targetY)" line1388="                       return" line1389="                   }" line1390="               }" line1391="           }" line1392="           drawShape(pixels)" line1393="       }" line1394="   " line1395="       //% group=&quot;디스플레이 제어(심화)&quot;" line1396="       //% weight=3" line1397="       //% block=&quot;사각형 출력:| x: $x0 y: $y0 에서| x: $x1 y: $y1|까지&quot;" line1398="       //% x0.defl=0" line1399="       //% y0.defl=0" line1400="       //% x1.defl=20" line1401="       //% y1.defl=20" line1402="       export function drawRectangle(x0: number, y0: number, x1: number, y1: number) {" line1403="           drawLine(x0, y0, x1, y0)" line1404="           drawLine(x0, y1, x1, y1)" line1405="           drawLine(x0, y0, x0, y1)" line1406="           drawLine(x1, y0, x1, y1)" line1407="       }" line1408="   " line1409="       //% group=&quot;디스플레이 제어(심화)&quot;" line1410="       //% weight=2" line1411="       //% block=&quot;속이 비워진 원(○) 출력:| x: $x y: $y| 크기: radius: $r&quot;" line1412="       //% x.defl=64" line1413="       //% y.defl=32" line1414="       //% r.defl=10" line1415="       //% weight=0" line1416="       export function drawCircle(x: number, y: number, r: number) {" line1417="           let theta = 0;" line1418="           let step = Math.PI / 90;  // Adjust step for smoothness" line1419="           let pixels: Array&lt;Array&lt;number&gt;&gt; = [];" line1420="       " line1421="           while (theta &lt; 2 * Math.PI) {" line1422="               let xPos = Math.floor(x + r * Math.cos(theta));" line1423="               let yPos = Math.floor(y + r * Math.sin(theta));" line1424="               pixels.push([xPos, yPos]);" line1425="               theta += step;" line1426="           }" line1427="       " line1428="           drawShape(pixels);" line1429="       }" line1430="       " line1431="       //% group=&quot;디스플레이 제어(심화)&quot;" line1432="       //% weight=1" line1433="       //% block=&quot;속이 채워진 원(●) 출력:| x: $x y: $y| 크기: radius: $r&quot;" line1434="       //% x.defl=64" line1435="       //% y.defl=32" line1436="       //% r.defl=10" line1437="       export function drawFilledCircle(x: number, y: number, r: number) {" line1438="           for (let dx = -r; dx &lt;= r; dx++) {" line1439="               let height = Math.floor(Math.sqrt(r * r - dx * dx));" line1440="               drawLine(x + dx, y - height, x + dx, y + height);" line1441="           }" line1442="       }" line1443="       */" line1444="    /**" line1445="    * ---------------oled display(od01)-------------------" line1446="    */" line1447="    const Font_5x7 = hex``" line1448="    export enum Display {" line1449="        //% block=&quot;ON&quot;" line1450="        On = 1," line1451="        //% block=&quot;OFF&quot;" line1452="        Off = 0" line1453="    }" line1454="" line1455="    const MIN_X = 0" line1456="    const MIN_Y = 0" line1457="    const MAX_X = 127" line1458="    const MAX_Y = 63" line1459="" line1460="    let _I2CAddr = 60" line1461="    let _screen = pins.createBuffer(1025)" line1462="    let _buf2 = pins.createBuffer(2)" line1463="    let _buf3 = pins.createBuffer(3)" line1464="    let _buf4 = pins.createBuffer(4)" line1465="    let _buf7 = pins.createBuffer(7)" line1466="    let _buf13 = pins.createBuffer(13)" line1467="    _buf7[0] = 0x40" line1468="    _buf13[0] = 0x40" line1469="    let _DRAW = 1" line1470="    let _cx = 0" line1471="    let _cy = 0" line1472="" line1473="    let _ZOOM = 0" line1474="    let _DOUBLE = 0" line1475="" line1476="    function cmd1(d: number) {" line1477="        let n = d % 256;" line1478="        pins.i2cWriteNumber(_I2CAddr, n, NumberFormat.UInt16BE);" line1479="    }" line1480="" line1481="    function cmd2(d1: number, d2: number) {" line1482="        _buf3[0] = 0;" line1483="        _buf3[1] = d1;" line1484="        _buf3[2] = d2;" line1485="        pins.i2cWriteBuffer(_I2CAddr, _buf3);" line1486="    }" line1487="" line1488="    function cmd3(d1: number, d2: number, d3: number) {" line1489="        _buf4[0] = 0;" line1490="        _buf4[1] = d1;" line1491="        _buf4[2] = d2;" line1492="        _buf4[3] = d3;" line1493="        pins.i2cWriteBuffer(_I2CAddr, _buf4);" line1494="    }" line1495="" line1496="    function set_pos(col: number = 0, page: number = 0) {" line1497="        cmd1(0xb0 | page) // page number" line1498="        cmd1(0x00 | (col % 16)) // lower start column address" line1499="        cmd1(0x10 | (col &gt;&gt; 4)) // upper start column address    " line1500="    }" line1501="" line1502="    // clear bit" line1503="    function clrbit(d: number, b: number): number {" line1504="        if (d &amp; (1 &lt;&lt; b))" line1505="            d -= (1 &lt;&lt; b)" line1506="        return d" line1507="    }" line1508="" line1509="    /**" line1510="     * draw / refresh screen" line1511="     */" line1512="    function draw(d: number) {" line1513="        if (d &gt; 0) {" line1514="            set_pos()" line1515="            pins.i2cWriteBuffer(_I2CAddr, _screen)" line1516="        }" line1517="    }" line1518="" line1519="    //% block=&quot;디스플레이 색상 반전 %on&quot;" line1520="    //% blockGap=8" line1521="    //% group=&quot;디스플레이 제어&quot;" line1522="    //% on.shadow=&quot;toggleOnOff&quot;" line1523="    //% weight=2" line1524="    export function invert(on: boolean = true) {" line1525="        let o = (on) ? 0xA7 : 0xA6" line1526="        cmd1(o)" line1527="    }" line1528="" line1529="" line1530="    //% block=&quot;디스플레이 지우기&quot;" line1531="    //% blockGap=8" line1532="    //% group=&quot;디스플레이 제어&quot;" line1533="    //% weight=3" line1534="    export function clear() {" line1535="        _cx = _cy = 0" line1536="        _screen.fill(0)" line1537="        _screen[0] = 0x40" line1538="        draw(1)" line1539="    }" line1540="" line1541="" line1542="    //% block=&quot;디스플레이 화면 %on&quot;" line1543="    //% on.defl=1" line1544="    //% blockGap=8" line1545="    //% group=&quot;디스플레이 제어&quot;" line1546="    //% on.shadow=&quot;toggleOnOff&quot;" line1547="    //% weight=1" line1548="    export function display(on: boolean) {" line1549="        if (on)" line1550="            cmd1(0xAF);" line1551="        else" line1552="            cmd1(0xAE);" line1553="    }" line1554="" line1555="    //% block=&quot;픽셀 출력 - 위치: x %x y %y, 색상: %color&quot;" line1556="    //% x.max=127 x.min=0 x.defl=0" line1557="    //% y.max=63 y.min=0 y.defl=0" line1558="    //% color.max=1 color.min=0 color.defl=1" line1559="    //% blockGap=8 inlineInputMode=inline" line1560="    //% group=&quot;디스플레이 제어(도형)&quot;" line1561="    //% weight=4" line1562="    export function pixel(x: number, y: number, color: number = 1) {" line1563="        let page = y &gt;&gt; 3" line1564="        let shift_page = y % 8" line1565="        let ind = x + page * 128 + 1" line1566="        let c = (color) ? (_screen[ind] | (1 &lt;&lt; shift_page)) : clrbit(_screen[ind], shift_page)" line1567="        _screen[ind] = c" line1568="        /*if (_DRAW) {" line1569="            set_pos(x, page)" line1570="            _buf2[0] = 0x40" line1571="            _buf2[1] = b" line1572="            pins.i2cWriteBuffer(_I2CAddr, _buf2)" line1573="        }*/" line1574="    }" line1575="" line1576="    function char(c: string, col: number, row: number, color: number = 1) {" line1577="        let p = (Math.min(127, Math.max(c.charCodeAt(0), 32)) - 32) * 5" line1578="        let m = 0" line1579="        let ind2 = col + row * 128 + 1" line1580="" line1581="" line1582="        if (_DOUBLE) {" line1583="" line1584="            for (let i = 0; i &lt; 5; i++) {" line1585="                let l = 0" line1586="                for (let j = 0; j &lt; 8; j++) {" line1587="                    if (color &gt; 0 ? Font_5x7[p + i] &amp; (1 &lt;&lt; j) : !(Font_5x7[p + i] &amp; (1 &lt;&lt; j))) {" line1588="                        pixel(col + m, row * 8 + l)" line1589="                        pixel(col + m, row * 8 + l + 1)" line1590="" line1591="                        pixel(col + m + 1, row * 8 + l)" line1592="                        pixel(col + m + 1, row * 8 + l + 1)" line1593="                    }" line1594="" line1595="                    l += 2" line1596="                }" line1597="                m += 2" line1598="            }" line1599="" line1600="            let q = 0" line1601="            for (let k = 0; k &lt; 8; k++) {" line1602="                if (color == 0) {" line1603="                    pixel(col + 10, row * 8 + q)" line1604="                    pixel(col + 10, row * 8 + q + 1)" line1605="" line1606="                    pixel(col + 11, row * 8 + q)" line1607="                    pixel(col + 11, row * 8 + q + 1)" line1608="                }" line1609="" line1610="                q += 2" line1611="            }" line1612="" line1613="        } else {" line1614="" line1615="            let s = 0" line1616="" line1617="            for (let t = 0; t &lt; 5; t++) {" line1618="                _screen[ind2 + t] = (color &gt; 0) ? Font_5x7[p + t] : Font_5x7[p + t] ^ 0xFF" line1619="" line1620="                if (_ZOOM) {" line1621="                    _buf13[s + 1] = _screen[ind2 + t]" line1622="                    _buf13[s + 2] = _screen[ind2 + t]" line1623="" line1624="                } else {" line1625="                    _buf7[t + 1] = _screen[ind2 + t]" line1626="                }" line1627="" line1628="                s += 2" line1629="            }" line1630="" line1631="            _screen[ind2 + 5] = (color &gt; 0) ? 0 : 0xFF" line1632="" line1633="            if (_ZOOM) {" line1634="                _buf13[12] = _screen[ind2 + 5]" line1635="            } else {" line1636="                _buf7[6] = _screen[ind2 + 5]" line1637="            }" line1638="" line1639="            set_pos(col, row)" line1640="            if (_ZOOM) {" line1641="                pins.i2cWriteBuffer(_I2CAddr, _buf13)" line1642="            } else {" line1643="                pins.i2cWriteBuffer(_I2CAddr, _buf7)" line1644="            }" line1645="" line1646="        }" line1647="    }" line1648="" line1649="    //% block=&quot;문장 출력 - 내용: %s, 위치: %col열 %row행, 색상: %color&quot;" line1650="    //% s.defl='AI ponybot'" line1651="    //% col.max=120 col.min=0 col.defl=0" line1652="    //% row.max=7 row.min=0 row.defl=0" line1653="    //% color.max=1 color.min=0 color.defl=1" line1654="    //% blockGap=8 inlineInputMode=inline" line1655="    //% group=&quot;디스플레이 제어(데이터)&quot;" line1656="    //% weight=1" line1657="    export function showString(s: string, col: number, row: number, color: number = 1) {" line1658="        let steps = 0" line1659="        if (_DOUBLE) {" line1660="            steps = 12" line1661="            row *= 2" line1662="        } else {" line1663="            steps = 6" line1664="        }" line1665="        for (let u = 0; u &lt; s.length; u++) {" line1666="            char(s.charAt(u), col, row, color)" line1667="            col += steps" line1668="" line1669="        }" line1670="" line1671="        if (_DOUBLE) draw(1)" line1672="    }" line1673="" line1674="    //% block=&quot;숫자 출력 - 내용: %num, 위치: %col열 %row행, 색상: %color&quot;" line1675="    //% num.defl=777" line1676="    //% col.max=120 col.min=0 col.defl=0" line1677="    //% row.max=7 row.min=0 row.defl=0" line1678="    //% color.max=1 color.min=0 color.defl=1" line1679="    //% blockGap=8 inlineInputMode=inline" line1680="    //% group=&quot;디스플레이 제어(데이터)&quot;" line1681="    //% weight=3" line1682="    export function showNumber(num: number, col: number, row: number, color: number = 1) {" line1683="        showString(num.toString(), col, row, color)" line1684="    }" line1685="" line1686="    function scroll() {" line1687="        _cx = 0" line1688="" line1689="        if (_DOUBLE) {" line1690="            _cy += 2" line1691="        } else {" line1692="            _cy++" line1693="        }" line1694="        if (_cy &gt; 7) {" line1695="            _cy = 7" line1696="            _screen.shift(128)" line1697="            _screen[0] = 0x40" line1698="            draw(1)" line1699="        }" line1700="    }" line1701="" line1702="    //% block=&quot;문장 출력 - 내용: %s, 줄바꿈: %newline&quot;" line1703="    //% s.defl=&quot;AI ponybot&quot;" line1704="    //% newline.defl=true" line1705="    //% blockGap=8 inlineInputMode=inline" line1706="    //% group=&quot;디스플레이 제어(데이터)&quot;" line1707="    //% weight=2" line1708="    export function printString(s: string, newline: boolean = true) {" line1709="        let steps2 = 0" line1710="        if (_DOUBLE) {" line1711="            steps2 = 12" line1712="        } else {" line1713="            steps2 = 6" line1714="        }" line1715="" line1716="        for (let v = 0; v &lt; s.length; v++) {" line1717="            char(s.charAt(v), _cx, _cy, 1)" line1718="            _cx += steps2" line1719="            if (_cx &gt; 120) {" line1720="                scroll()" line1721="            }" line1722="        }" line1723="        if (newline) {" line1724="            scroll()" line1725="        }" line1726="" line1727="        if (_DOUBLE) draw(1)" line1728="    }" line1729="" line1730="    //% block=&quot;숫자 출력 - 내용: %num, 줄바꿈: %newline&quot;" line1731="    //% num.defl=&quot;777&quot;" line1732="    //% newline.defl=true" line1733="    //% weight=86 blockGap=8 inlineInputMode=inline" line1734="    //% group=&quot;디스플레이 제어(데이터)&quot;" line1735="    //% weight=4" line1736="    export function printNumber(num: number, newline: boolean = true) {" line1737="        printString(num.toString(), newline)" line1738="    }" line1739="" line1740="    //% block=&quot;수평선 출력 - 위치: x %x y %y, 길이: %len, 색상: %color&quot;" line1741="    //% x.max=127 x.min=0 x.defl=0" line1742="    //% y.max=63 y.min=0 y.defl=0" line1743="    //% len.max=128 len.min=1 len.defl=16" line1744="    //% color.max=1 color.min=0 color.defl=1" line1745="    //% blockGap=8 inlineInputMode=inline" line1746="    //% group=&quot;디스플레이 제어(도형)&quot;" line1747="    //% weight=2" line1748="    export function horizontalLine(x: number, y: number, len: number, color: number = 1) {" line1749="        let _sav = _DRAW" line1750="        if ((y &lt; MIN_Y) || (y &gt; MAX_Y)) return" line1751="        _DRAW = 0" line1752="        for (let w = x; w &lt; (x + len); w++)" line1753="            if ((w &gt;= MIN_X) &amp;&amp; (w &lt;= MAX_X))" line1754="                pixel(w, y, color)" line1755="        _DRAW = _sav" line1756="        draw(_DRAW)" line1757="    }" line1758="" line1759="    //% block=&quot;수직선 출력 - 위치: x %x y %y, 길이: %len, 색상: %color&quot;" line1760="    //% x.max=127 x.min=0 x.defl=0" line1761="    //% y.max=63 y.min=0 y.defl=0" line1762="    //% len.max=128 len.min=1 len.defl=16" line1763="    //% color.max=1 color.min=0 color.defl=1" line1764="    //% blockGap=8 inlineInputMode=inline" line1765="    //% group=&quot;디스플레이 제어(도형)&quot;" line1766="    //% weight=1" line1767="    export function verticalLine(x: number, y: number, len: number, color: number = 1) {" line1768="        let _sav2 = _DRAW" line1769="        _DRAW = 0" line1770="        if ((x &lt; MIN_X) || (x &gt; MAX_X)) return" line1771="        for (let a = y; a &lt; (y + len); a++)" line1772="            if ((a &gt;= MIN_Y) &amp;&amp; (a &lt;= MAX_Y))" line1773="                pixel(x, a, color)" line1774="        _DRAW = _sav2" line1775="        draw(_DRAW)" line1776="    }" line1777="" line1778="    //% block=&quot;사각형 출력 - x1 %x1 y1 %y1 x2 %x2 y2 %y2, 색상: %color&quot;" line1779="    //% color.defl=1" line1780="    //% blockGap=8 inlineInputMode=inline" line1781="    //% group=&quot;디스플레이 제어(도형)&quot;" line1782="    //% weight=3" line1783="    export function rectangle(x1: number, y1: number, x2: number, y2: number, color: number = 1) {" line1784="        if (x1 &gt; x2)" line1785="            x1 = [x2, x2 = x1][0];" line1786="        if (y1 &gt; y2)" line1787="            y1 = [y2, y2 = y1][0];" line1788="        _DRAW = 0" line1789="        horizontalLine(x1, y1, x2 - x1 + 1, color)" line1790="        horizontalLine(x1, y2, x2 - x1 + 1, color)" line1791="        verticalLine(x1, y1, y2 - y1 + 1, color)" line1792="        verticalLine(x2, y1, y2 - y1 + 1, color)" line1793="        _DRAW = 1" line1794="        draw(1)" line1795="    }" line1796="" line1797="" line1798="    // % blockId=&quot;OLED12864_I2C_init&quot; block=&quot;start OD01&quot;" line1799="    // % weight=5 blockGap=8" line1800="    function init() {" line1801="        cmd1(0xAE)       // SSD1306_DISPLAYOFF" line1802="        cmd1(0xA4)       // SSD1306_DISPLAYALLON_RESUME" line1803="        cmd2(0xD5, 0xF0) // SSD1306_SETDISPLAYCLOCKDIV" line1804="        cmd2(0xA8, 0x3F) // SSD1306_SETMULTIPLEX" line1805="        cmd2(0xD3, 0x00) // SSD1306_SETDISPLAYOFFSET" line1806="        cmd1(0 | 0x0)    // line #SSD1306_SETSTARTLINE" line1807="        cmd2(0x8D, 0x14) // SSD1306_CHARGEPUMP" line1808="        cmd2(0x20, 0x00) // SSD1306_MEMORYMODE" line1809="        cmd3(0x21, 0, 127) // SSD1306_COLUMNADDR" line1810="        cmd3(0x22, 0, 63)  // SSD1306_PAGEADDR" line1811="        cmd1(0xa0 | 0x1) // SSD1306_SEGREMAP" line1812="        cmd1(0xc8)       // SSD1306_COMSCANDEC" line1813="        cmd2(0xDA, 0x12) // SSD1306_SETCOMPINS" line1814="        cmd2(0x81, 0xCF) // SSD1306_SETCONTRAST" line1815="        cmd2(0xd9, 0xF1) // SSD1306_SETPRECHARGE" line1816="        cmd2(0xDB, 0x40) // SSD1306_SETVCOMDETECT" line1817="        cmd1(0xA6)       // SSD1306_NORMALDISPLAY" line1818="        cmd2(0xD6, 0)    // zoom off" line1819="        cmd1(0xAF)       // SSD1306_DISPLAYON" line1820="        clear()" line1821="    }" line1822="" line1823="    init();" line1824="}" numlines="1825"></mutation><next><block type="typescript_statement" id="FcYD|p2YM4i9*nD#|C84"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace smbus {" line1="    export function writeByte(addr: number, register: number, value: number): void {" line2="        let temp = pins.createBuffer(2);" line3="        temp[0] = register;" line4="        temp[1] = value;" line5="        pins.i2cWriteBuffer(addr, temp, false);" line6="    }" line7="    export function writeBuffer(addr: number, register: number, value: Buffer): void {" line8="        let temp2 = pins.createBuffer(value.length + 1);" line9="        temp2[0] = register;" line10="        for (let x2 = 0; x2 &lt; value.length; x2++) {" line11="            temp2[x2 + 1] = value[x2];" line12="        }" line13="        pins.i2cWriteBuffer(addr, temp2, false);" line14="    }" line15="    export function readBuffer(addr: number, register: number, len: number): Buffer {" line16="        let temp3 = pins.createBuffer(1);" line17="        temp3[0] = register;" line18="        pins.i2cWriteBuffer(addr, temp3, false);" line19="        return pins.i2cReadBuffer(addr, len, false);" line20="    }" line21="    function readNumber(addr: number, register: number, fmt: NumberFormat = NumberFormat.UInt8LE): number {" line22="        let temp4 = pins.createBuffer(1);" line23="        temp4[0] = register;" line24="        pins.i2cWriteBuffer(addr, temp4, false);" line25="        return pins.i2cReadNumber(addr, fmt, false);" line26="    }" line27="    export function unpack(fmt: string, buf: Buffer): number[] {" line28="        let le: boolean = true;" line29="        let offset: number = 0;" line30="        let result3: number[] = [];" line31="        let num_format: NumberFormat = 0;" line32="        for (let e = 0; e &lt; fmt.length; e++) {" line33="            switch (fmt.charAt(e)) {" line34="                case '&lt;':" line35="                    le = true;" line36="                    continue;" line37="                case '&gt;':" line38="                    le = false;" line39="                    continue;" line40="                case 'c':" line41="                case 'B':" line42="                    num_format = le ? NumberFormat.UInt8LE : NumberFormat.UInt8BE; break;" line43="                case 'b':" line44="                    num_format = le ? NumberFormat.Int8LE : NumberFormat.Int8BE; break;" line45="                case 'H':" line46="                    num_format = le ? NumberFormat.UInt16LE : NumberFormat.UInt16BE; break;" line47="                case 'h':" line48="                    num_format = le ? NumberFormat.Int16LE : NumberFormat.Int16BE; break;" line49="            }" line50="            result3.push(buf.getNumber(num_format, offset));" line51="            offset += pins.sizeOf(num_format);" line52="        }" line53="        return result3;" line54="    }" line55="}" numlines="56"></mutation></block></next></block></next></block></statement></block></xml>